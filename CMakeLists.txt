cmake_minimum_required(VERSION 3.22)
project(RoguelikeCppTutorial)
set( CMAKE_CXX_STANDARD 17 )

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
#set( VCPKG_MANIFEST_INSTALL OFF)

# Set the directory where the executables will be stored.
set(EXECUTABLE_OUTPUT_PATH
    ${PROJECT_BINARY_DIR}/bin
    CACHE PATH
    "Directory where executables will be stored"
)

# Specify the list of directories to search for cmake modules.
set(CMAKE_MODULE_PATH
    ${CMAKE_MODULE_PATH}
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake
    ${CMAKE_SOURCE_DIR}/CMake
    #${PROJECT_BINARY_DIR}
)

##############################################
# First for the generic no-config case (e.g. with mingw)
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH} )
set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH} )
set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH} )
# Second, for multi-config builds (e.g. msvc)
foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
    string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
    set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${EXECUTABLE_OUTPUT_PATH} )
    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${EXECUTABLE_OUTPUT_PATH} )
    set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${EXECUTABLE_OUTPUT_PATH} )
endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )

add_definitions(-DPROJECT_ROOT="${CMAKE_SOURCE_DIR}/")

#add_definitions(-DGLEW_STATIC) # don't use this as with vcpkg we automatically get the dynamic version

set(CMAKE_DEBUG_POSTFIX d)

set(EXECUTABLE_OUTPUT_PATH
    ${PROJECT_BINARY_DIR}/bin
    CACHE PATH
    "Directory where executables will be stored"
)

###############################################
function(assign_source_group)
    foreach(_source IN ITEMS ${ARGN})
        if (IS_ABSOLUTE "${_source}")
            file(RELATIVE_PATH _source_rel "${CMAKE_CURRENT_SOURCE_DIR}" "${_source}")
        else()
            set(_source_rel "${_source}")
        endif()
        get_filename_component(_source_path "${_source_rel}" PATH)
        string(REPLACE "/" "\\" _source_path_msvc "${_source_path}")
        source_group("${_source_path_msvc}" FILES "${_source}")
    endforeach()
endfunction(assign_source_group)
###############################################

# As generated by command-line execution: $CMAKE_EXE -B build -S . -DCMAKE_TOOLCHAIN_FILE=C:\Users\$USER\Documents\repos\vcpkg\scripts\buildsystems\vcpkg.cmake
find_package(GLEW CONFIG REQUIRED)
#target_link_libraries(main PRIVATE GLEW::GLEW)
find_package(fmt CONFIG REQUIRED)
#target_link_libraries(main PRIVATE fmt::fmt)
find_package(imgui CONFIG REQUIRED)
#target_link_libraries(main PRIVATE imgui::imgui)
find_package(glfw3 CONFIG REQUIRED)
#target_link_libraries(main PRIVATE glfw)
find_package(glm CONFIG REQUIRED)
#target_link_libraries(main PRIVATE glm::glm)
find_package(nlohmann_json CONFIG REQUIRED)
#target_link_libraries(main PRIVATE nlohmann_json nlohmann_json::nlohmann_json)
find_path(STB_INCLUDE_DIRS "stb.h")
#target_include_directories(main PRIVATE ${STB_INCLUDE_DIRS})
find_package(magic_enum CONFIG REQUIRED)
#target_link_libraries(main PRIVATE magic_enum::magic_enum)
find_path(NANO_SIGNAL_SLOT_INCLUDE_DIRS "nano_function.hpp")
#target_include_directories(main PRIVATE ${NANO_SIGNAL_SLOT_INCLUDE_DIRS})

SET( APP_INCLUDE_DIRECTORIES_FW ${glm_DIR} ${STB_INCLUDE_DIRS} ${GLEW_DIR} ${fmt_DIR} ${imgui_DIR} ${glfw3_DIR} ${nlohmann_json_DIR} ${magic_enum_DIR} ${NANO_SIGNAL_SLOT_INCLUDE_DIRS})
SET( APP_INCLUDE_DIRECTORIES ${APP_INCLUDE_DIRECTORIES_FW} framework)
SET( APP_LINK_LIBRARIES GLEW::GLEW fmt::fmt imgui::imgui glfw glm::glm nlohmann_json::nlohmann_json framework magic_enum::magic_enum)

add_subdirectory(framework)
#add_subdirectory(00_Setting_up)
#add_subdirectory(01_Drawing_map_player_and_input)
#add_subdirectory(02_Creature_entities_and_movement)
#add_subdirectory(03_User_interface)
#add_subdirectory(04_Field_of_vision)
#add_subdirectory(05_Object_entities)
#add_subdirectory(06_Delving_into_the_dungeon)
#add_subdirectory(07_Game_states)
#add_subdirectory(08_Item_entities_and_inventory)
#add_subdirectory(09_Equipment_consumables_and_effects)
add_subdirectory(10_GUI_driven_actions_and_turns)
add_subdirectory(11_Saving_and_loading)
add_subdirectory(12_Finishing_touches)